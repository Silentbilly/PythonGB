# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо
# только числами. Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
# скрипта, введя, например, команду «stop». При этом скрипт завершается, сформированный список с числами выводится на
# экран.
# Подсказка: для этого задания примем, что пользователь может вводить только числа и строки. Во время ввода
# пользователем очередного элемента необходимо реализовать проверку типа элемента. Вносить его в список, только если
# введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее
# сообщение. При этом работа скрипта не должна завершаться.

class OnlyDigitException(Exception):
    def __init__(self, txt):
        self.txt = "Попытка ввести текст"


digits_list = []


def fill_the_list(num_list):
    try:
        input_text = input("Введите числа в список: ")
        if input_text != "stop":
            if not input_text.isdigit():
                raise OnlyDigitException("Попытка ввести текст. Введите числа.")
            num_list.append(input_text)
            fill_the_list(num_list)
        else:
            print(digits_list)
    except OnlyDigitException as err:
        print(err)
        fill_the_list(num_list)


def main():
    fill_the_list(digits_list)


if __name__ == "__main__":
    main()
